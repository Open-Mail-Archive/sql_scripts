create table if not exists pom_profiles (
    id uuid primary key references auth.users on delete cascade not null,
    username text unique not null,
    avatar text,
    updated_at timestamp with time zone default timezone('utc'::text, now()),
    created_at timestamp with time zone default timezone('utc'::text, now()),

    constraint username_length check (char_length(username) >= 3)
);
alter table pom_profiles replica identity full;

create table if not exists pom_imap (
    id serial primary key,
    user_id uuid references public.pom_profiles on delete cascade not null,
    username text unique not null,
    token text not null,
    server text not null,
    port int not null default 993,
    secure boolean default true
);
alter table pom_imap replica identity full;

create table if not exists pom_mailboxes (
    id text not null primary key,
    name text not null,
    imap_account_id integer references public.pom_imap on delete cascade not null,
    path text not null,
    flags text,
    delimiter text not null,
    listed boolean default true not null,
    parent text,
    specialUse text,
    subscribed boolean default true not null
);
alter table pom_mailboxes replica identity full;

create table pom_emails (
    id bigint primary key not null,
    mailbox_id text references public.pom_mailboxes on delete cascade not null,
    flags text,
    date timestamp with time zone NOT NULL,
    subject text not null,
    from_ text not null,
    to_ text not null,
    reply_to text,
    sender text not null,
    path text not null
);
alter table pom_emails replica identity full;

create table if not exists pom_tags (
    id serial primary key not null,
    name text not null unique,
    color text,
    icon text
);
alter table pom_profiles replica identity full;

create table pom_emails_tags (
    primary key(tag_id, email_id),
    tag_id integer references public.pom_tags on delete cascade not null,
    email_id bigint references public.pom_emails on delete cascade not null
);
alter table pom_emails_tags replica identity full;